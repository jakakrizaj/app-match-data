# This application probably has plenty of bugs, feel free to correct them 
# yourself or send them to me @
# jakakrizaj2k@gmail.com
# I used chatgpt to set the layout of the app (tabs and basic plot layouts)
# The data management - rotation and matching algorithm, I wrote myself
# 
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import sys


def close(event):
    sys.exit()

class Tree:
    def __init__(self, id, x, y, dbh):
        self.id = id
        self.x = x
        self.y = y
        self.dbh = dbh
    
    def distance_to(self, another: "Tree", dbh_weight=1):
        distance = np.sqrt(np.square(self.x - another.x) + np.square(self.y - another.y) + np.square(self.dbh * dbh_weight - another.dbh * dbh_weight))
        return distance
    
    def __str__(self):
        return f"{self.id}, dbh: {self.dbh}"


class MatchingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Usklajevalec podatkov")
        self.data1 = None
        self.data2 = None
        self.modified_data2 = None
        self.matched_id = None
        self.dict_matches = None
        self.df_final_matched = None
        self.missing_ref_trees = 0
        self.missing_ref_tree_code = "999"
        
        self.tab_control = ttk.Notebook(self.root)
        
        # Tab 0: Explain the program? Add notes? Could be included into tab1. 
        # Still might be better to sort of force the user into reading the instructions before clicking away...

        # Tab 1: File Input
        self.tab1 = ttk.Frame(self.tab_control)
        self.tab_control.add(self.tab1, text="Naloži podatke")
        self.create_tab1()
        
        # Tab 2: Scatter Plot
        self.tab2 = ttk.Frame(self.tab_control)
        self.tab_control.add(self.tab2, text="Vizualna poravnava")
        self.create_tab2()
        
        # Tab 3: Match data:
        self.tab3 = ttk.Frame(self.tab_control)
        self.tab_control.add(self.tab3, text="Usklajevanje podatkov")
        self.create_tab3()

        # Tab Z: Show results
        self.tab_z = ttk.Frame(self.tab_control)
        self.tab_control.add(self.tab_z, text="Prikaži rezultate")
        self.create_tab_z()

        self.tab_control.pack(expand=1, fill="both")

    # Tab 1: Input Files
    def create_tab1(self):
        label = ttk.Label(self.tab1, text="Izberi dve .csv datoteki:")
        label.pack(pady=10)

        self.file1_path = tk.StringVar()
        self.file2_path = tk.StringVar()

        ttk.Entry(self.tab1, textvariable=self.file1_path, width=50).pack(padx=10, pady=5)
        ttk.Entry(self.tab1, textvariable=self.file2_path, width=50).pack(padx=10, pady=5)

        file1_button = ttk.Button(self.tab1, text="Terenski podatki", command=self.browse_file1)
        file1_button.pack(pady=5)
        
        file2_button = ttk.Button(self.tab1, text="Lidar podatki", command=self.browse_file2)
        file2_button.pack(pady=5)

        load_button = ttk.Button(self.tab1, text="Naloži datoteke", command=self.load_files)
        load_button.pack(pady=20)

    def browse_file1(self):
        filepath = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
        if filepath:
            self.file1_path.set(filepath)

    def browse_file2(self):
        filepath = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
        if filepath:
            self.file2_path.set(filepath)

    def initial_transform_values(self, data1, data2):
        "Returns tuple of the initial difference between bounding boxes of data1 and data2"
        middle1 = (((max(data1["x"]) + min(data1["x"])) / 2), ((max(data1["y"]) + min(data1["y"])) / 2))
        middle2 = (((max(data2["x"]) + min(data2["x"])) / 2), ((max(data2["y"]) + min(data2["y"])) / 2))
        initial_x = middle2[0] - middle1[0]
        initial_y = middle2[1] - middle1[1]
        return (initial_x, initial_y)
        
    def load_files(self):
        try:
            # Check if files have coordinate data!
            self.data1 = pd.read_csv(self.file1_path.get())
            if "X" in self.data1.columns:
                self.data1 = self.data1.rename(columns={"X" : "x", "Y" : "y", "DBH" : "dbh", "ID" : "id"})
            elif "x" in self.data1.columns:
                pass
            else:
                raise IndexError(f"Ne najdem podatkov o koordinatah za referenčne podatke!")
            
            self.data2 = pd.read_csv(self.file2_path.get())
            if "X" in self.data2.columns:
                self.data2 = self.data2.rename(columns={"X" : "x", "Y" : "y", "DBH" : "dbh", "ID" : "id"})
            elif "x" in self.data2.columns:
                pass
            else:
                raise IndexError(f"Ne najdem podatkov o koordinatah za referenčne podatke!")
            
            self.initial_transform = self.initial_transform_values(self.data1, self.data2)
            self.data2["x"] -= self.initial_transform[0]
            self.data2["y"] -= self.initial_transform[1]
            self.modified_data2 = self.data2.copy()  # Make a copy to track changes
            

            #print(self.data1)
            #print(self.data2)
            messagebox.showinfo("Uspeh", "Datoteke uspešno naložene!")
        except Exception as e:
            messagebox.showerror("Napaka", f"Datoteke neuspešno naložene: {e}")

    # Tab 2: Scatter Plot with Sliders
    def create_tab2(self):
        self.fig, self.ax = plt.subplots()
        self.fig.set_size_inches(7, 7)
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.tab2)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=1)

        self.x_slider = tk.Scale(self.tab2, from_=-200, to=200, orient=tk.HORIZONTAL, label="Transformiraj X (dm)", command=self.update_plot)
        self.x_slider.pack(fill=tk.X)

        self.y_slider = tk.Scale(self.tab2, from_=-200, to=200, orient=tk.HORIZONTAL, label="Transformiraj Y (dm)", command=self.update_plot)
        self.y_slider.pack(fill=tk.X)

        self.rot_slider = tk.Scale(self.tab2, from_=-180, to=180, orient=tk.HORIZONTAL, label="Zarotiraj podatke", command=self.update_plot)
        self.rot_slider.pack(fill=tk.X)

        plot_button = ttk.Button(self.tab2, text="Prikaži podatke", command=lambda: self.plot_data(self.ax, self.canvas))
        plot_button.pack(pady=10)

    def plot_data(self, ax, canvas):
        if self.data1 is not None and self.data2 is not None:
            
            ax.clear()
            ax.scatter(self.data1['x'], self.data1['y'], label="Referenčni podatki", color='royalblue', s=self.data1["dbh"]**1.5/4)
            ax.scatter(self.modified_data2['x'], self.modified_data2['y'], label="Lidar podatki", color='red', s=self.modified_data2["dbh"]**1.5/4, alpha=0.7)
            ax.set_xlabel('X [m]')
            ax.set_ylabel('Y [m]')
            ax.set_aspect("equal")
            ax.legend(bbox_to_anchor=(0.5, 1.15))
            canvas.draw()
        else:
            messagebox.showerror("Napaka", "Datoteke še niso naložene.")

    def update_plot(self, val=None):
        if self.modified_data2 is not None:
            # Adjust x and y values of dataset 2
            x_shift = self.x_slider.get()/10
            y_shift = self.y_slider.get()/10
            rot_value = np.radians(self.rot_slider.get())

            x2 = (self.data2['x'] * np.cos(rot_value) - self.data2['y'] * np.sin(rot_value)) + x_shift
            y2 = (self.data2['x'] * np.sin(rot_value) + self.data2['y'] * np.cos(rot_value)) + y_shift

            self.modified_data2["x"] = x2
            self.modified_data2["y"] = y2
            
            self.plot_data(self.ax, self.canvas)


    # Tab 3: Data matching:
    def create_tab3(self):
        plot_button = ttk.Button(self.tab3, text="Osveži/ponastavi prikaz", command=lambda: self.plot_data(self.ax2, self.canvas2))
        plot_button.pack(pady=10)

        self.fig2, self.ax2 = plt.subplots()
        self.fig2.set_size_inches(7, 7)
        self.canvas2 = FigureCanvasTkAgg(self.fig2, master=self.tab3)
        self.canvas2.get_tk_widget().pack(fill=tk.BOTH, expand=1)
        
        dbh_weight_label = tk.Label(self.tab3, text="Določi težo DBH pri izračunu razdalj (0 - upoštevaj samo razdaljo, 100 - upoštevaj samo DBH), priporočam 0,2 - 0,7")
        dbh_weight_label.pack(padx=1)
        dbh_weight_entry = ttk.Entry(self.tab3)
        dbh_weight_entry.pack(pady=5)
        dbh_weight_entry.insert(0, "0.5")     # Default value for dbh weights
        create_dict_button = ttk.Button(self.tab3, text="Ustvari zbirko povezav", 
            command=lambda: self.create_matching_dict(df_ref=self.data1, df_las=self.modified_data2, dbh_weight=float(dbh_weight_entry.get())))
        create_dict_button.pack(pady=5)

        confidence_label = tk.Label(self.tab3, text="Določi samozavest pri povezovanju (0 - vse avtomatsko, 100 - vse ročno), priporočam 1 - 4")
        confidence_label.pack(padx=1)
        confidence_entry = ttk.Entry(self.tab3)
        confidence_entry.pack(pady=5)
        confidence_entry.insert(0, "2") # Default value for confidence
        start_match_button = ttk.Button(self.tab3, text="Poveži podatke",
            command=lambda: self.match_trees(float(confidence_entry.get())))
        start_match_button.pack(pady=5)

    def create_matching_dict(self, df_ref, df_las, dbh_weight=1):
        """
        Creates a dictionary, each key is a reference tree id, the values
        are a list of dictionaries where each dictionary contains the id
        of the las tree and its' distance to the reference tree.
        """
        df_las = df_las.reset_index()
        dict_matches = {}
        for index1, row1 in df_ref.iterrows():
            ref_tree = Tree(row1["id"], row1["x"], row1["y"], row1["dbh"])
            mylist = []
            for index2, row2 in df_las.iterrows():
                las_tree = Tree(row2["id"], row2["x"], row2["y"], row2["dbh"])
                distance_to_las = ref_tree.distance_to(las_tree, dbh_weight=dbh_weight)
                minidict = {"tree" : las_tree, "dist" : distance_to_las}
                mylist.append(minidict)

            # Sort the list of dicts by distances
            newlist = sorted(mylist, key=lambda d: d["dist"])

            dict_matches[ref_tree.id] = newlist

        self.dict_matches = dict_matches
        self.print_dict_output(dict_matches)

    def print_dict_output(self, dict_matches):
        """Outputs the matching dict data to the console"""
        for key, list_dicts in dict_matches.items():
            print(f"The closest trees and their IDs for reference tree {key}:")
            dist_1_0 = list_dicts[1]["dist"] - list_dicts[0]["dist"]
            print(f"Distance closest and second closest: {np.round(dist_1_0, 1)}")
        
            for minidict in list_dicts[:3]:
                print(f"\tlas tree ID: {minidict['tree'].id} \tdistance: {np.round(minidict['dist'], 2)}")

    def match_trees(self, confidence=5):
        if self.dict_matches is not None:
            matched_id = {}
            visual_matches = []
            
            for key, list_dicts_main in self.dict_matches.items():
                # Get reference tree data
                ref_tree_data = self.data1.loc[self.data1["id"] == key].reset_index()
                ref_tree = Tree(id=key, x=ref_tree_data.at[0, "x"], y=ref_tree_data.at[0, "y"], dbh=ref_tree_data.at[0, "dbh"])

                list_dicts = list_dicts_main.copy()
                # First remove all matched ids from dictionary - there seems to be a bug here, sometimes trees can be selected twice...
                for minidict in list_dicts_main:
                    if minidict["tree"].id in matched_id.values():
                        list_dicts.remove(minidict)
                
                # If there aren't any more candidate trees left, assign a matched id of 0.
                if len(list_dicts) == 0:
                    matched_id[key] = self.missing_ref_tree_code
                    self.missing_ref_trees += 1
                else:
                    closest = list_dicts[0]
                    second = list_dicts[1]

                    # If distance is above the confidence threshold, automate the matching, otherwise ask user for input
                    if (second["dist"] - closest["dist"] > confidence) and (closest["dist"] < 4):    # HARDOCED VALUE = 4! If closest tree is more than 4 units away, still trigger the manual match.
                        matched_id[key] = closest["tree"].id
                        # Add a visual connection on match
                        visual_match = self.ax2.plot((ref_tree.x, closest["tree"].x), (ref_tree.y, closest["tree"].y), linewidth=1.5, c="black")
                        visual_matches.append(visual_match)
                        self.canvas2.draw()
                    else:
                        # Plot data,
                        added_tree = self.ax2.scatter(ref_tree.x, ref_tree.y, s=ref_tree.dbh**1.5/4, c="lightgreen")
                        i = 1
                        texts = []
                            # Add condition if there are fewer than 5 candidate trees left:                       
                        length_query = 5
                        if len(list_dicts) < length_query:
                            length_query = len(list_dicts)
                        for minidict in list_dicts[:length_query]:
                            las_tree = minidict["tree"]
                            text = self.ax2.text(las_tree.x, las_tree.y, s=i, fontsize=12, ha="center", va="center")
                            texts.append(text)
                            i += 1
                        self.canvas2.draw()
                        
                        # Add popup and save the result,
                        user_input = tk.simpledialog.askinteger(title="Izbira drevesa", prompt="Katero število pripada zeleni piki? Če ni kandidata, vnesi 0")
                        if user_input == 0:
                            matched_id[key] = self.missing_ref_tree_code
                            self.missing_ref_trees += 1
                        else:
                            selected_minidict = list_dicts[user_input-1]
                            matched_id[key] = selected_minidict["tree"].id
                            visual_match = self.ax2.plot((ref_tree.x, selected_minidict["tree"].x), (ref_tree.y, selected_minidict["tree"].y), linewidth=1.5, c="black")
                            visual_matches.append(visual_match)
                            print(f"\tSelected las tree: {selected_minidict['tree'].id}!\n")
                        # Reset plot to previous state and add the connection
                        added_tree.remove()
                        for text in texts:
                            text.remove()

                        self.canvas2.draw()
            
            self.matched_id = matched_id
            print(matched_id)
        else:
            messagebox.showerror("Napaka", "Zbirka povezav še ni ustvarjena.")
                
    # Tab Z: Output Changes, maybe one more tab with a report? Include the functionality into this tab? 
    def create_tab_z(self):
        self.output_text = tk.Text(self.tab_z, height=20, width=80)
        self.output_text.pack(pady=10)

        output_button = ttk.Button(self.tab_z, text="Prikaži transformacijo lidar podatkov", command=self.show_changes)
        output_button.pack(pady=10)
        # Button that creates the df: (could be same as one button below?)
        create_df_button = ttk.Button(self.tab_z, text="Ustvari datoteko usklajenih podatkov", command=self.match_dataframes)
        create_df_button.pack(pady=5)

        # Button that displays the df:

        # Button that saves the df:
        save_df_button = ttk.Button(self.tab_z, text="Shrani usklajene podatke", command=self.save_matched_data)
        save_df_button.pack(pady=5)
        # Optionally I could also maybe add a button that does the rigid transform to find best fit of reference and lidar data? 
        # And that this would then be included in the report as a sort of positioning error measurement - good idea

    def show_changes(self):
        if self.modified_data2 is not None:
            x_shift = self.x_slider.get()/10
            x_shift_global = x_shift + self.initial_transform[0]
            y_shift = self.y_slider.get()/10
            y_shift_global = y_shift + self.initial_transform[1]
            rot_value = np.radians(self.rot_slider.get())
            cos = np.round(np.cos(rot_value), 4)
            sin = np.round(np.sin(rot_value), 4)
            transformation_matrix = f"{cos} {-sin} {0:.4f} {x_shift_global:.4f}\n"
            transformation_matrix += f"{sin} {cos} {0:.4f} {y_shift_global:.4f}\n{0:.4f} {0:.4f} {1:.4f} {0:.4f}\n{0:.4f} {0:.4f} {0:.4f} {1:.4f}"
            self.output_text.delete("1.0", tk.END)
            self.output_text.insert(tk.END, f"\nCelotna sprememba upošteva predhodno spremembo, ki jo program samodejno\nnaredi za prikaz podatkov v istem prostoru.\n")
            self.output_text.insert(tk.END, f"Sprememba X: {x_shift}, celotna sprememba X: {x_shift_global:.3f}\n")
            self.output_text.insert(tk.END, f"Sprememba Y: {y_shift}, celotna sprememba Y: {y_shift_global:.3f}\n\n")
            self.output_text.insert(tk.END, f"Transformacijska matrika: \n{transformation_matrix}\n\n")
            self.output_text.insert(tk.END, f"Opomba: prikazani so podatki za prevod lidar podatkov v terenske, za prevod\nterenskih v koordinatni sistem lidarja bi bila potrebna obratna transformacija.")
        else:
            messagebox.showerror("Napaka", "Nobenih modifikacij ni za pokazati.")

    def match_dataframes(self):
        """
        Creates a final dataframe that has matched data from both datasets.
        Also output the commission and ommission errors, when computing commission
        errors there is (for now) an assumption that all lidar trees are inside the plot bounds
        """
        ref_tree_matches = []
        las_tree_matches = []
        for ref_id, las_id in self.matched_id.items():
            if las_id != self.missing_ref_tree_code:
                ref_tree_matches.append(ref_id)
                las_tree_matches.append(las_id)


        order_ref_dict = {val: index for index, val in enumerate(ref_tree_matches)}
        order_las_dict = {val: index for index, val in enumerate(las_tree_matches)}

        df_ordered_data1 = self.data1.copy()
        #df_missed_ref_trees = df_ordered_data1.loc[df_ordered_data1[]] # Sort from values of the las_tree_order
        df_ordered_data2 = self.data2.copy()
        # For data2 you should also first remove the ids that don't have a match! and add them to the commission error? What if the tree is outside of the plot bounds?        
        df_ordered_data1["sort_order"] = df_ordered_data1["id"].map(order_ref_dict)
        df_ordered_data2["sort_order"] = df_ordered_data2["id"].map(order_las_dict)

        # Create subsets of dataframes to 
        df_ordered_data1 = df_ordered_data1.sort_values(by="sort_order").reset_index()
        df_matched_ref_trees = df_ordered_data1.dropna(subset=["sort_order"]).reset_index()
        df_ommission = df_ordered_data1[df_ordered_data1["sort_order"].isnull()].reset_index()
        df_ordered_data2 = df_ordered_data2.sort_values(by="sort_order").reset_index()
        df_matched_las_trees = df_ordered_data2.dropna(subset=["sort_order"]).reset_index()
        df_commission = df_ordered_data2[df_ordered_data2["sort_order"].isnull()].reset_index()

        ref_x = df_matched_ref_trees["x"]
        ref_y = df_matched_ref_trees["y"]
        ref_dbh = df_matched_ref_trees["dbh"]
        ref_id = df_matched_ref_trees["id"]

        las_x = df_matched_las_trees["x"]
        las_y = df_matched_las_trees["y"]
        las_dbh = df_matched_las_trees["dbh"]
        las_id = df_matched_las_trees["id"]

        df_final_matched = pd.DataFrame({"ID_ref" : ref_id,
                                 "ID_match" : las_id,
                                 "DBH_ref" : ref_dbh,
                                 "DBH_las" : las_dbh,
                                 "X_ref" : ref_x,
                                 "Y_ref" : ref_y,
                                 "X_match" : las_x,
                                 "Y_match" : las_y})
        
        self.df_final_matched = df_final_matched
        messagebox.showinfo("Uspeh", "Datoteka je ustvarjena!")
        print(df_final_matched)
        return df_final_matched # Come back once you figure out what you want to do with the commission and ommission data!

    def save_matched_data(self):
        """Saves the data in the set directory with the given name"""
        if self.df_final_matched is not None:
            file_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV Files", "*.csv")])
            if file_path:
                self.df_final_matched.to_csv(file_path, sep=",", index=False)
        else:
            messagebox.showerror("Napaka", "Usklajena datoteka še ni ustvarjena.")
            pass


# Running the application
if __name__ == "__main__":
    root = tk.Tk()
    root.bind('<Escape>',close)
    app = MatchingApp(root)
    root.mainloop()
